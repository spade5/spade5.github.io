{"version":3,"sources":["modules/TCP/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TCP","state","data","count","sWindow","threshold","dv","DataSet","createView","setTimeout","addData","this","type","getRandomAction","Math","min","max","floor","push","time","value","setState","JSON","parse","stringify","rand","round","random","source","title","padding","autoFit","height","scale","position","triggerOn","name","React","Component","App","style","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"sUAaqBA,E,4MACnBC,MAAqD,CACnDC,KAAM,I,EAERC,MAAgB,E,EAChBC,QAAkB,E,EAClBC,UAAoB,G,EACpBC,IAAK,IAAIC,KAAUC,a,kEACE,IAAD,OAClBC,YAAW,kBAAM,EAAKC,YAXT,O,gCAaJ,IAAD,OACR,KAAIC,KAAKR,OAfK,KAed,CACA,IAAMS,EAAOD,KAAKE,kBApBF,IAqBZD,EACFD,KAAKP,QAAUO,KAAKP,QAAUO,KAAKN,UAAYS,KAAKC,IAAIJ,KAAKN,UAA0B,EAAfM,KAAKP,SAAeO,KAAKP,QAAU,GAE3GO,KAAKN,UAAYS,KAAKE,IAAIF,KAAKG,MAAMN,KAAKP,QAAU,GAAI,GAEtDO,KAAKP,QAzBU,IAwBbQ,EACa,EAEAD,KAAKN,WAVhB,IAaFH,EAASS,KAAKV,MAAdC,KACNA,EAAKgB,KAAK,CAAEC,KAAMR,KAAKR,MAAOiB,MAAOT,KAAKP,UAC1CO,KAAKR,QACLQ,KAAKU,SAAS,CAAEnB,KAAMoB,KAAKC,MAAMD,KAAKE,UAAUtB,MAChDO,YAAW,kBAAM,EAAKC,YA9BT,Q,wCAiCb,IAAMe,EAAOX,KAAKY,MAAsB,IAAhBZ,KAAKa,UAC7B,OAAIF,EAAO,GAvCK,EAwCZA,EAAO,GAvCQ,EACE,I,+BAyCb,IACAvB,EAASS,KAAKV,MAAdC,KAER,OADAS,KAAKL,GAAGsB,OAAO1B,GAEb,eAAC,IAAD,WACE,cAAC,IAAD,CAAY2B,MAAM,iCAClB,eAAC,QAAD,CACEC,QAAS,CAAC,GAAI,GAAI,GAAI,IACtBC,SAAO,EACPC,OAAQ,IACR9B,KAAMS,KAAKL,GACX2B,MAAO,CAAEb,MAAO,CAAEL,IAAK,GAAKI,KAAM,CAAEJ,IAAK,EAAGC,IAlDpC,MA6CV,UAME,cAAC,OAAD,CAAMkB,SAAS,eACf,cAAC,QAAD,CAAOA,SAAS,eAChB,cAAC,UAAD,CAASC,UAAU,UACnB,cAAC,OAAD,CAAMC,KAAK,OAAOP,OAAK,c,GAnDAQ,IAAMC,WCNlBC,G,qLAEjB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQC,MAAO,CAAER,OAAQ,SAAzB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOS,KAAK,IAAZ,SACE,cAAC,EAAD,gB,GAPmBJ,IAAMC,YCOxBI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,EAAgBc,QAAQC,O","file":"static/js/main.db619b4d.chunk.js","sourcesContent":["import React from 'react'\nimport { PageHeader } from 'antd'\nimport Layout from 'antd/lib/layout/layout'\nimport { Chart, Line, Point, Tooltip, Axis } from 'bizcharts'\nimport DataSet from '@antv/data-set'\n\nconst ACTION_NONE = 1\nconst ACTION_TIMEOUT = 2\nconst ACTION_RECOMFIRM = 3\n\nconst MAX_COUNT = 100\nconst TIME_GAP = 300\n\nexport default class TCP extends React.Component {\n  state: { data: { time: number; value: number }[] } = {\n    data: [],\n  }\n  count: number = 0\n  sWindow: number = 1\n  threshold: number = 12\n  dv = new DataSet().createView()\n  componentDidMount() {\n    setTimeout(() => this.addData(), TIME_GAP)\n  }\n  addData() {\n    if (this.count >= MAX_COUNT) return\n    const type = this.getRandomAction()\n    if (type === ACTION_NONE) {\n      this.sWindow = this.sWindow < this.threshold ? Math.min(this.threshold, this.sWindow * 2) : this.sWindow + 1\n    } else {\n      this.threshold = Math.max(Math.floor(this.sWindow / 2), 1)\n      if (type === ACTION_TIMEOUT) {\n        this.sWindow = 1\n      } else {\n        this.sWindow = this.threshold\n      }\n    }\n    let { data } = this.state\n    data.push({ time: this.count, value: this.sWindow })\n    this.count++\n    this.setState({ data: JSON.parse(JSON.stringify(data)) })\n    setTimeout(() => this.addData(), TIME_GAP)\n  }\n  getRandomAction() {\n    const rand = Math.round(Math.random() * 100)\n    if (rand < 90) return ACTION_NONE\n    if (rand < 95) return ACTION_TIMEOUT\n    return ACTION_RECOMFIRM\n  }\n  render() {\n    const { data } = this.state\n    this.dv.source(data)\n    return (\n      <Layout>\n        <PageHeader title=\"TCP 拥塞控制\"></PageHeader>\n        <Chart\n          padding={[10, 20, 50, 50]}\n          autoFit\n          height={500}\n          data={this.dv}\n          scale={{ value: { min: 0 }, time: { min: 0, max: MAX_COUNT } }}>\n          <Line position=\"time*value\" />\n          <Point position=\"time*value\" />\n          <Tooltip triggerOn=\"hover\" />\n          <Axis name=\"time\" title></Axis>\n        </Chart>\n      </Layout>\n    )\n  }\n}\n","import React from 'react'\nimport { Layout } from 'antd'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport TCP from 'modules/TCP'\nimport './App.css'\nimport 'antd/dist/antd.css'\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Layout style={{ height: '100vh' }}>\n          <Switch>\n            <Route path=\"/\">\n              <TCP />\n            </Route>\n          </Switch>\n        </Layout>\n      </Router>\n    )\n  }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log)\n"],"sourceRoot":""}