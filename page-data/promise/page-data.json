{"componentChunkName":"component---src-templates-blog-post-js","path":"/promise/","result":{"data":{"site":{"siteMetadata":{"title":"Spade5 Blog"}},"markdownRemark":{"id":"bc613f5b-0a82-510c-8e6c-5a0b7107ab49","excerpt":"实现一个轮子之前，我们先得了解这个轮子。 首先附上官方说明：MDN 官方描述： Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers…","html":"<p>实现一个轮子之前，我们先得了解这个轮子。</p>\n<p>首先附上官方说明：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN</a></p>\n<p>官方描述：</p>\n<blockquote>\n<p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p>\n</blockquote>\n<p>Promise 存在的意义，就是代替回调函数进行处理异步操作，Promise 被设计成可链式调用，这个特性很好的避免了回调的多层嵌套，提高了异步代码的可读性和可维护性。</p>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myFirstPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)</span>\n    <span class=\"token comment\">//在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//代码正常执行！</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyFirstPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">successMessage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//successMessage的值是上面调用resolve(...)方法传入的值.</span>\n    <span class=\"token comment\">//successMessage参数不一定非要是字符串类型，这里只是举个例子</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yay! \"</span> <span class=\"token operator\">+</span> successMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>简单了解了 Promise，我们就可以一步步拆解，来实现一个 Promise。</p>\n<h3>构造函数</h3>\n<p>Promise 的构造函数接收一个参数，类型为 <code class=\"language-text\">Function</code>，我们称之为 <code class=\"language-text\">executor</code>。执行构造函数的过程中，<code class=\"language-text\">executor</code> 会被传入两个参数，一个叫 <code class=\"language-text\">resolve</code>，另一个叫<code class=\"language-text\">reject</code>，这两个函数的实现在后面讲。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token function\"> MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span><span class=\"token function\"> resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//TODO</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span><span class=\"token function\"> reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//TODO</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token function\">    excutor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>状态 &#x26; 值</h3>\n<p>Promise 有三个状态，pending，resolved（也可以叫 fullfilled）, rejected</p>\n<p>pending: Promise 的初始状态，此时 Promise 的值为 <code class=\"language-text\">undefined</code>；\nresolved: resolve 方法被执行后的状态，此时 Promise 的值为 resolve 接受的参数；\nrejected: reject 方法被执行或者代码报错之后的状态，此时 Promise 的值为 reject 接收的参数，或者报错信息。</p>\n<p><strong>注意：Promise 状态只能由 Pending 变成 Resolved 和 Rejected，且不可逆。</strong></p>\n<p>根据以上特性，构造函数可以这样补充：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS_PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS_RESOLVED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'resolved'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS_REJECTED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'rejected'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span><span class=\"token function\"> MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">STATUS_PENDING</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span><span class=\"token function\"> resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token constant\">STATUS_PENDING</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">STATUS_RESOLVED</span><span class=\"token punctuation\">;</span>\n        that<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span><span class=\"token function\"> reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token constant\">STATUS_PENDING</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">STATUS_REJECTED</span><span class=\"token punctuation\">;</span>\n        that<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token function\">    excutor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样就实现了一个基本的状态管理机制。</p>\n<h3>then</h3>\n<p>then 是 Promise 最常用的一个方法，由于每一个实例都有自己的 then 方法，所以 then 应该位于原型上。\nthen 接收两个 Function 类型的参数，分别是 onResolved（在 resolved 状态时会调用）、onRejected（在 rejected 状态时会调用），这两个方法都接收一个参数，值为 Promise 的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function-variable function\">    then</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">!</span>onResolved <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//不传任何参数时返回原来的 Promise</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//TODO</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>then 有如下几个特性：</p>\n<ol>\n<li>返回一个新的 Promise，状态跟原来的 Promise 一致。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">then </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">!</span>onResolved <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> rej<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_RESOLVED</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span><span class=\"token function\"> onResolved</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_REJECTED</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span><span class=\"token function\"> onRejected</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">            rej</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_PENDING</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//TODO</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>执行 then 的时候有两种场景，一种是原来的 Promise 已经是 resolved/rejected 状态，这个时候会直接执行 onResolved/onRejected，并将返回值作为新的 Promise 的值；另一种情况，原来的 promise 还是 pending 状态，就要等原来的 promise 修改状态。所以 Promise 实例需要记录回调，当状态改变时，调用 onResolved/onRejected，并将结果作为 then 返回的 Promise 的值。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">then </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">!</span>onResolved <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> resolve<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> reject<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> rej<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_RESOLVED</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span><span class=\"token function\"> onResolved</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">            res</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_REJECTED</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span><span class=\"token function\"> onRejected</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">            rej</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_PENDING</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resolve <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span> <span class=\"token comment\">//+++</span>\n            reject <span class=\"token operator\">=</span> rej<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//+++</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved <span class=\"token operator\">&amp;&amp;</span> resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//+++</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onResolved </span><span class=\"token operator\">=</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span><span class=\"token function\"> onResolved</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">            resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onRejected <span class=\"token operator\">&amp;&amp;</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//+++</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onRejected </span><span class=\"token operator\">=</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">            reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">onRejected</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>构造函数也要做出相应的修改，在改变状态时执行相应的方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token function\"> MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">STATUS_PENDING</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onResolved <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRejected <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span><span class=\"token function\"> resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token constant\">STATUS_PENDING</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">STATUS_RESOLVED</span><span class=\"token punctuation\">;</span>\n        that<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        that<span class=\"token punctuation\">.</span>onResolved <span class=\"token operator\">&amp;&amp;</span> that<span class=\"token punctuation\">.</span><span class=\"token function\">onResolved</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//+++</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span><span class=\"token function\"> reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token constant\">STATUS_PENDING</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token constant\">STATUS_REJECTED</span><span class=\"token punctuation\">;</span>\n        that<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n        that<span class=\"token punctuation\">.</span>onRejected <span class=\"token operator\">&amp;&amp;</span> that<span class=\"token punctuation\">.</span><span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//+++</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token function\">    excutor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>\n<p>如果 onResolved 的执行结果是 Promise 实例，会将这个 Promise 的值作为新的 Promise 的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"></code></pre></div>\n</li>\n</ol>\n<p>MyPromise.prototype.then = function(onResolved, onRejected) {\n    //…\n    let ps = new MyPromise((res, rej) => {\n        if (that.status === STATUS_RESOLVED) {\n            let result = onResolved(that.value);\n            if (result instanceof MyPromise) {\n                result.then((v) => res(v), (v) => rej(v)); //+++\n            } else {\n                res(result);\n            } \n        }\n        //…\n    });</p>\n<p>    if (onResolved &#x26;&#x26; resolve) {\n        this.onResolved = () => {\n            let result = onResolved.call(ps, that.value);\n            if (result instanceof MyPromise) {\n                result.then((v) => resolve(v), (v) => reject(v)); //+++\n            } else {\n                resolve(result);\n            } \n        };\n    }\n    //…\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 告一段落\n到此，一个最基础的 Promise 已经实现了，可以在控制台跑起来试试。\n\n```js\n\nlet ps1 = new MyPromise((res) =&gt; window.res = res);\nlet ps2 = ps1.then((v) =&gt; {\n    console.log(v);\n    return 2;\n});\nwindow.res(1);\nps2.then((v) =&gt; console.log(v));\nlet ps3 = new Promise((res) =&gt; window.res1 = res);\nlet ps4 = ps3.then((v) =&gt; {\n    console.log(v);\n    return 4;\n});\nwindow.res1(3);\nps4.then((v) =&gt; console.log(v));</code></pre></div>\n<p>执行结果为：1 2 3 4。表现与原生的 Promise 一致。</p>\n<h3>catch</h3>\n<p>catch 方法相当于 then(null, onRejected) 的语法糖，所以实现起来跟 then 差不多，这里为了方便，我们可以直接写成：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">catch </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>报错捕获</h3>\n<p>按照我们目前的实现，catch 只能处理 reject 的信息，不能获取报错信息，所以在执行各种回调函数的时候都要加上 try catch。</p>\n<p>首先是构造函数，executor 执行时要 try catch：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">excutor</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后是 then 方法中的 resolve/reject：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">then </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">!</span>onResolved <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> resolve<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> reject<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> rej<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_RESOLVED</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//+++</span>\n                <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span><span class=\"token function\"> onResolved</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span>result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> res</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> rej</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                    res</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                rej</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_REJECTED</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//+++</span>\n<span class=\"token function\">                rej</span><span class=\"token punctuation\">(</span><span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                rej</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_PENDING</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resolve <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n            reject <span class=\"token operator\">=</span> rej<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved <span class=\"token operator\">&amp;&amp;</span> resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onResolved </span><span class=\"token operator\">=</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//+++</span>\n                <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span><span class=\"token function\"> onResolved</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span>result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> resolve</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                    resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onRejected <span class=\"token operator\">&amp;&amp;</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onRejected </span><span class=\"token operator\">=</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//+++</span>\n<span class=\"token function\">                reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">onRejected</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>异步</h3>\n<p>现在 Promise 的基本功能都已经实现了，但是还有一个很重要的特性我们没有处理：<strong>then 里面的操作是异步的，并且属于微任务</strong>，为了实现异步调用，我们封装一个方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token function\"> asyncCall</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">window<span class=\"token punctuation\">.</span>queueMicrotask</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> fn <span class=\"token operator\">&amp;&amp;</span><span class=\"token function\"> fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">        setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> fn <span class=\"token operator\">&amp;&amp;</span><span class=\"token function\"> fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的 queueMicrotask 是一个新 API，用于执行一个微任务，但是目前兼容性并不好（可在 <a href=\"https://caniuse.com/#search=queueMicrotask\">caniuse</a>中查询），如果浏览器不支持，我们可以用 setTimeout 来模拟。</p>\n<p>接下来，我们可以把 then 里面调用 onResolved/onRejected 的部分用 asyncCall 包裹起来：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">then </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//......</span>\n    <span class=\"token keyword\">let</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> rej<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_RESOLVED</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">            asyncCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//+++</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span><span class=\"token function\"> onResolved</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span>result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> res</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> rej</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                        res</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> \n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                    rej</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">that<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_REJECTED</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">            asyncCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//+++</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                    rej</span><span class=\"token punctuation\">(</span><span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                    rej</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//......</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onResolved <span class=\"token operator\">&amp;&amp;</span> resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onResolved </span><span class=\"token operator\">=</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">            asyncCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//+++</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span><span class=\"token function\"> onResolved</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span>result <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> resolve</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                        resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> \n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                    reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onRejected <span class=\"token operator\">&amp;&amp;</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onRejected </span><span class=\"token operator\">=</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">            asyncCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//+++</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                    reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">onRejected</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                    reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这时再运行测试代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">    res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>结果是 0 2 5 3 1 4，经典的微任务宏任务面试题！</p>\n<h3>静态方法</h3>\n<p>除了上述实例方法以外，Promise 还提供了四个静态方法：</p>\n<h4>Promise.resolve/Promise.reject</h4>\n<p>返回一个状态为 resolved/rejected 的 promise 对象，值为传入的参数。</p>\n<p>实现起来非常简单，new 一个实例，在 executor 里面直接 resolve/reject 就行了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">MyPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">resolve </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">        resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nMyPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">reject </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">        reject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Promise.all/Promise.race</h4>\n<p>类似于 Array.prototype.every/Array.prototype.some，这两个方法都接收一个 promise 数组，返回一个 promise 对象，all 会在传入的所有 promise 都 resolve 之后变成 resolved 状态，race 会在任意一个 promise resolve 之后变成 resolved 状态。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">MyPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">all </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> resolvedCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> resolvedValues <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">len <span class=\"token operator\">===</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">            resolve</span><span class=\"token punctuation\">(</span>resolvedValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                resolvedCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                resolvedValues<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolvedCount <span class=\"token operator\">===</span> len</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                    resolve</span><span class=\"token punctuation\">(</span>resolvedCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nMyPromise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">race </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">                resolve</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token parameter\"> </span><span class=\"token operator\">=></span><span class=\"token function\"> reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这两个方法在入参长度为零的时候的处理不太一样，这是标准约定的。</p>\n<h3>完成</h3>\n<p>整个 Promise 的 API 我们都已经完成了，欢迎吐槽。</p>","frontmatter":{"title":"【炒冷饭造轮子】之【Promise】","date":"January 10, 2020","description":"教你从 0 开始一步步实现一个 Promise，包含链式调用、异步调用等特性的实现."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/promise/","previous":null,"next":null}}}